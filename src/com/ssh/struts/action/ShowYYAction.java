/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.ssh.struts.action;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Controller;

import com.ssh.DAO.PandaDAO;
import com.ssh.DAO.UserDAO;
import com.ssh.POJO.Panda;
import com.ssh.POJO.User;
import com.ssh.common.Global;
import com.ssh.service.ShowYYService;
import com.ssh.struts.form.ShowYYForm;

/** 
 * MyEclipse Struts
 * Creation date: 08-14-2018
 * 
 * XDoclet definition:
 * @struts.action path="/showYY" name="showYYForm" input="/jsp/showYY.jsp" scope="request" validate="true"
 */

@Controller("/showYY")
public class ShowYYAction extends Action {
	/*
	 * Generated Methods
	 */

	@Autowired
	@Qualifier("showYYService")
	ShowYYService showYYService;
	
	private static final Logger log = LoggerFactory.getLogger(PandaDAO.class);
	StringBuffer message = new StringBuffer();
	
	
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	/* (non-Javadoc)
	 * @see org.apache.struts.action.Action#execute(org.apache.struts.action.ActionMapping, org.apache.struts.action.ActionForm, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ShowYYForm showYYForm = (ShowYYForm) form;// TODO Auto-generated method stub
		String id = showYYForm.getZid2();
		message = new StringBuffer();
		System.out.println("stirngid"+id);
		
		//Integer id = Integer.valueOf(pid);
		//System.out.println("Integerid"+id);
		String name = showYYForm.getName();
		Panda panda = showYYService.whosYourAncestry(id);
		log.info("祖先size"+panda);
		if(panda != null && !panda.getZid().isEmpty()){
			request.setAttribute("message",  id+"祖先是"+panda.getZid()+"|"+panda.getName());
			return mapping.findForward("showYY");
		}
		
		
		
		String father = null;
		Integer sex = null;
		
		//Panda panda = new Panda();
		
		PandaDAO pandaDAO = (PandaDAO)Global.getBean("PandaDAO");
		
		
		
		
		boolean firstFlag = false;
		
		
		
		
		//遍历查找最高级熊祖宗 想办法归到一个方法
		while(true)
		{
			if(id == null)
			{
				
				request.setAttribute("message",  message.append(firstFlag?"--查找结束":"id有问题"));
				return mapping.findForward("showYY");
			}
			List<Panda> list= new ArrayList();
			list.add(pandaDAO.findByZid(id));
			System.out.println("id="+id);
			if(list.size() == 0 || list.size() > 1){
				message.append("<br/>熊猫"+name+"家族如下|<br>");
				//message.append(whosyoursonByLine(id,0));
				whosyoursonByLine(id,0);
				request.setAttribute("message", message.append(firstFlag?"--查找结束":"查无此熊或者id有重复熊"));
				return mapping.findForward("showYY");
			}
			
			panda = (Panda) list.get(0);
			father = panda.getFather();
			name = panda.getName();
			message = message.append(name);
			System.out.println("father="+father);
			//这个判断好像没有必要  以上的list.size() == 0 好像已经结束
			if(father == null){
				message.append("找不到这只熊猫父亲");
			}
			else if(father != null && father.isEmpty() )
			{
				message.append("<br/>熊猫"+name+"家族如下|<br>");
				sex = panda.getSex();
				//message.append(whosyoursonByLine(father.toString(),0));
				//whosyoursonByLine(father.toString(),0);
				whosyoursonByLineAndSex(id.toString(),0,sex);
				request.setAttribute("message", message.toString());
				return mapping.findForward("showYY");
			}
			else if(father != null && "99999".equals(father)){
				message.append("<br/>熊猫"+name+"家族如下|<br>");
				//message.append(whosyoursonByLine(id,0));
				//whosyoursonByLine(id,0);
				whosyoursonByLineAndSex(id,0,sex == null?2:sex);
				request.setAttribute("message", message.toString());
				return mapping.findForward("showYY");
			}
			message = message.append("<br/>|<br>");
			System.out.println(message.toString());
			
			id = father;
			firstFlag = true;
			
		}
		
		
		
		// ClassPathXmlApplicationContext beans = new ClassPathXmlApplicationContext("../applicationContext.xml");
	    //   System.out.println(beans);
		
	}
	
	
	public void whosyourdaddy(Panda panda){
		
		
		
		
	}
	
	public String whosyourson(String id){
		
		StringBuffer message = new StringBuffer();
		if(id == null || id.isEmpty())
		{
			
			return message.append("id为空").toString();
		}
		Panda panda = new Panda();
		PandaDAO pandaDAO = (PandaDAO)Global.getBean("PandaDAO");
		boolean firstFlag = true;//无作用目前
		while(true){
			List<?> pandaList = pandaDAO.findByFather(Integer.valueOf(id));
			if(pandaList == null){
				message.append("该id有问题");
				return message.toString();
			}
			else if(pandaList.size() == 0 && firstFlag){
				message.append("此猫太小，还没孩子");
				return message.toString();
			}
			else if(pandaList.size() == 0){
				message.append("后继无人");
				return message.toString();
			}
			System.out.println("谱系号"+id+"熊猫孩子数量"+pandaList.size());
			for(int i = 0; i < pandaList.size(); i++){
				panda = (Panda) pandaList.get(i);
				id = panda.getZid();
				message.append(whosyourson(id));
				message.append(panda.getName()+"--");
				
			}
			
			message.append("<br/>|");
			
			
		}
	}
	
	public void whosyoursonByLine(String id,int line){
			
			//StringBuffer message = new StringBuffer();
			Integer zid = 0;
			if(id == null || id.isEmpty())
			{
				message.append("id为空").toString();
				return;
			}
			Panda panda = new Panda();
			PandaDAO pandaDAO = (PandaDAO)Global.getBean("PandaDAO");
			boolean firstFlag = true;
			while(true){
				//雌雄判断 可否引用参数
				List<?> pandaList = pandaDAO.findByFather(Integer.valueOf(id));
				if(pandaList == null){
					message.append("该id有问题");
					
					return ;
				}
				if(pandaList.size() == 0)
				{
					pandaList = pandaDAO.findByMother(Integer.valueOf(id));
				}
				
				
				
				else if(pandaList.size() == 0 && firstFlag){
					line = line - 1;
					message.append("无子");
					return ;
				}
				else if(pandaList.size() == 0){
					//line = line - 1;
					message.append("后继无人");
					return ;
					
				}
				
				firstFlag = false;
				System.out.println("谱系号"+id+"熊猫孩子数量"+pandaList.size());
				zid = Integer.valueOf(id);
				line++;
				for(int i = 0; i < pandaList.size(); i++){
					panda = (Panda) pandaList.get(i);
					
					id = panda.getZid();
					
					for(int j = 0; j < line; j++){
						message.append(" ");
					}
					
					message.append("<br/>|");
					message.append(panda.getName()+"("+line+"父"+zid+")"+"--");
					
					//message.append(whosyoursonByLine(id,line));
					whosyoursonByLine(id,line);
				}
				
				message.append("<br/>|");
				
				
			}
		}
	
	//小熊猫性别判断有问题，这个暂时保留
	public void whosyoursonByLineAndSex(String id,int line,int sex){
		
		//StringBuffer message = new StringBuffer();
		Integer zid = 0;
		int zsex = 2;
		
		if(id == null || id.isEmpty() || "99999".equals(id))
		{
			message.append("id为空或者是野猫99999").toString();
			return;
		}
		
		
		Panda panda = new Panda();
		PandaDAO pandaDAO = (PandaDAO)Global.getBean("PandaDAO");
		boolean firstFlag = true;
		while(true){
			//雌雄判断 可否引用参数
			List<?> pandaList = null;
			if(sex == 0){
				pandaList = pandaDAO.findByMother(id);
			}
			else if(sex == 1){
				pandaList = pandaDAO.findByFather(id);
			}
			else{
				pandaList = pandaDAO.findByFather(id);
			}
			
			
			//List<?> pandaList = pandaDAO.findByFather2(Integer.valueOf(id));
			if(pandaList == null){
				message.append("性别未知");
				
				return ;
			}
			
			else if(pandaList.size() == 0 && firstFlag){
				line = line - 1;
				message.append("无子");
				return ;
			}
			else if(pandaList.size() == 0){
				//line = line - 1;
				message.append("后继无人");
				return ;
				
			}
			
			firstFlag = false;
			System.out.println("谱系号"+id+"熊猫孩子数量"+pandaList.size());
			zid = Integer.valueOf(id);
			zsex = sex;
			line++;
			for(int i = 0; i < pandaList.size(); i++){
				panda = (Panda) pandaList.get(i);
				
				id = panda.getZid();
				sex = panda.getSex();
				
				for(int j = 0; j < line; j++){
					message.append(" ");
				}
				
				message.append("<br/>");
				for(int j = 0; j <= line; j++){
					message.append("\t");
				}
				message.append("|");
				message.append(panda.getName()+"("+line+sex+zid+")"+"--");
				
				//message.append(whosyoursonByLine(id,line));
				whosyoursonByLineAndSex(id,line,sex);
			}
			
			message.append("<br/>|");
			
			
		}
	}
}