/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.ssh.struts.action;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONArray;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Controller;

import com.ssh.POJO.Genealogy;
import com.ssh.POJO.Panda;
import com.ssh.common.MessageAndFlag;
import com.ssh.service.GenealogyService;
import com.ssh.struts.form.ModifyGenealogyForm;

/** 
 * MyEclipse Struts
 * Creation date: 09-21-2018
 * 
 * XDoclet definition:
 * @struts.action path="/modifyGenealogy" name="modifyGenealogyForm" input="/jsp/modifyGenealogy.jsp" scope="request" validate="true"
 * @struts.action-forward name="searchGenealogy" path="/jsp/searchGenealogy.jsp"
 */
@Controller("/getGenealogyList")
public class GetGenealogyListAction extends Action {
	/*
	 * Generated Methods
	 */

	Logger log = LoggerFactory.getLogger(GetGenealogyListAction.class);
	
	@Autowired
	@Qualifier("genealogyService")
	private GenealogyService genealogyService;
	
	
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ModifyGenealogyForm genealogyForm = (ModifyGenealogyForm) form;// TODO Auto-generated method stub
		String more = request.getParameter("more");
		String display = request.getParameter("display");
		String ancestryId = request.getParameter("ancestryId");
		List list = new ArrayList(); 
		List list2 = new ArrayList();
		
		if("SON".equals(display) && !ancestryId.isEmpty()){
			log.info("getlist by ANCESTRY");
			Genealogy genealogyTemp = new Genealogy();
			genealogyTemp.setZid(ancestryId);
			Genealogy genealogy = genealogyService.getGenealogys(genealogyTemp).get(0);
			if(genealogy != null){
				Map pandaMap = new HashMap();
				pandaMap.put("genealogy",genealogy);
				pandaMap.put("line", 1);
				pandaMap.put("ancestry", genealogy.getFather());//这里key应该改为nextNode或者ancestryId
				
				list2.add(pandaMap);
				list = genealogyService.whosYourSonByLineAndSex(ancestryId,1,genealogy.getSex() == null?2:genealogy.getSex(),true);
				if(list != null ){
					for (Object object : list) {
						list2.add(object);
					}
				}
				log.info("getlist by Ancestry("+ancestryId+") , size:"+list2.size());
				
			}
		}
		else if("ANCESTRY".equals(display) && !ancestryId.isEmpty()){
			
			
			list2 = genealogyService.whosYourAncestryByLineAndSex(ancestryId, "0", 1, true);
			
			
			int line = 0;
			/*if(null != list && list.size() > 0){
				//为了不加个js方法，这里需要先取出line，然后line全部取反
				for (Object object : list) {
					if((Integer)((Map)object).get("line") > line){
						line = (Integer)((Map)object).get("line");
					}
				}
				//取得最大代数并加1
				line += 1;
				for(Object object : list){
					
					int li = (Integer)((Map)object).get("line");
					
					//代数line倒过来
					((Map)object).put("line", line-li);
					list2.add(object);
					
//					  数字5是限定多少代
//					if(line <= 5){
//						((Map)object).put("line", line-li);
//						list2.add(object);
//					}
//					else if(line > 5){
//						//转类型都这么麻烦 自动解包  太复杂了  考虑用泛型
//						//倒叙数4个加入list2列表
//						if(li < 5){
//							((Map)object).put("line", 5-li);
//							list2.add(object);
//						}
//						
//						
//					}
					
					
					
				}
				
				
			}*/
			log.info("getlist by SON("+ancestryId+") , size:"+list2.size());
		
		}
		else{
			list2 = null;
		}
		
		
		
		//JSONObject json = JSONObject.fromObject(list2);
		
		if(null != list2){
			JSONArray jsonA = JSONArray.fromObject(list2);
			log.info(jsonA.toString());
			try {
				response.getWriter().write(jsonA.toString());
				response.getWriter().flush();
				response.getWriter().close();
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			
			
		}
		
		
		
		
		return null;
	}
}